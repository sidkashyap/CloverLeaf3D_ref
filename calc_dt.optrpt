Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: calc_dt_module._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_dt_module._) [1] calc_dt.f90(22,8)

===========================================================================

Begin optimization report for: CALC_DT_MODULE::CALC_DT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CALC_DT_MODULE::CALC_DT) [2] calc_dt.f90(26,12)
  -> EXTERN: (48,10) CALC_DT_KERNEL


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at calc_dt.f90(92,22)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 2.000 
   remark #15478: estimated potential speedup: 1.420 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at calc_dt.f90(93,22)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at calc_dt.f90(94,22)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at calc_dt.f90(95,22)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.770 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at calc_dt.f90(96,22)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.530 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END
===========================================================================
