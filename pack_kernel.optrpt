Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: pack_kernel_module._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (pack_kernel_module._) [1] pack_kernel.f90(25,8)

===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_LEFT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_LEFT) [2] pack_kernel.f90(29,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(74:7-74:7):OMP:pack_kernel_module_mp_clover_pack_message_left_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(75,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(76,5)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pack_kernel.f90(77,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at pack_kernel.f90(77,7)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pack_kernel.f90(77,7)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at pack_kernel.f90(77,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at pack_kernel.f90(76,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

      LOOP BEGIN at pack_kernel.f90(77,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15460: masked strided loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at pack_kernel.f90(77,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_LEFT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_LEFT) [3] pack_kernel.f90(87,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(132:7-132:7):OMP:pack_kernel_module_mp_clover_unpack_message_left_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(133,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(134,5)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pack_kernel.f90(135,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at pack_kernel.f90(135,7)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.000 
         remark #15478: estimated potential speedup: 1.310 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pack_kernel.f90(135,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at pack_kernel.f90(134,5)
   <Multiversioned v2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 19 
      remark #15477: vector loop cost: 20.500 
      remark #15478: estimated potential speedup: 0.920 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at pack_kernel.f90(135,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15460: masked strided loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at pack_kernel.f90(135,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_RIGHT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_RIGHT) [4] pack_kernel.f90(145,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(190:7-190:7):OMP:pack_kernel_module_mp_clover_pack_message_right_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(191,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(192,5)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pack_kernel.f90(193,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at pack_kernel.f90(193,7)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.500 
         remark #15478: estimated potential speedup: 1.570 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pack_kernel.f90(193,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at pack_kernel.f90(192,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

      LOOP BEGIN at pack_kernel.f90(193,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15460: masked strided loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at pack_kernel.f90(193,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_RIGHT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_RIGHT) [5] pack_kernel.f90(203,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(248:7-248:7):OMP:pack_kernel_module_mp_clover_unpack_message_right_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(249,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(250,5)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pack_kernel.f90(251,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at pack_kernel.f90(251,7)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pack_kernel.f90(251,7)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at pack_kernel.f90(251,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at pack_kernel.f90(250,5)
   <Multiversioned v2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 19 
      remark #15477: vector loop cost: 20.500 
      remark #15478: estimated potential speedup: 0.920 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at pack_kernel.f90(251,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15460: masked strided loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at pack_kernel.f90(251,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_TOP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_TOP) [6] pack_kernel.f90(261,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(307:7-307:7):OMP:pack_kernel_module_mp_clover_pack_message_top_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(306,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(308,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(309,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(309,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(309,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(309,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(308,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at pack_kernel.f90(309,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(309,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_TOP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_TOP) [7] pack_kernel.f90(319,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(365:7-365:7):OMP:pack_kernel_module_mp_clover_unpack_message_top_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(364,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(366,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(367,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(367,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(367,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(367,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(366,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 25.500 
   remark #15478: estimated potential speedup: 0.940 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at pack_kernel.f90(367,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(367,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_BOTTOM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_BOTTOM) [8] pack_kernel.f90(377,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(423:7-423:7):OMP:pack_kernel_module_mp_clover_pack_message_bottom_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(422,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(424,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(425,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(425,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(425,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(425,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(424,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at pack_kernel.f90(425,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(425,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_BOTTOM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_BOTTOM) [9] pack_kernel.f90(435,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(481:7-481:7):OMP:pack_kernel_module_mp_clover_unpack_message_bottom_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(480,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(482,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(483,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(483,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(483,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(483,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(482,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 25.500 
   remark #15478: estimated potential speedup: 0.940 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at pack_kernel.f90(483,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(483,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_BACK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_BACK) [10] pack_kernel.f90(493,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(539:7-539:7):OMP:pack_kernel_module_mp_clover_pack_message_back_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(538,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(540,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(541,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(541,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(541,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(541,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(540,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at pack_kernel.f90(541,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(541,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_BACK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_BACK) [11] pack_kernel.f90(551,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(597:7-597:7):OMP:pack_kernel_module_mp_clover_unpack_message_back_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(596,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(598,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(599,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(599,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(599,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(599,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(598,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 25.500 
   remark #15478: estimated potential speedup: 0.940 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at pack_kernel.f90(599,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(599,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_FRONT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_PACK_MESSAGE_FRONT) [12] pack_kernel.f90(609,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(654:7-654:7):OMP:pack_kernel_module_mp_clover_pack_message_front_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(653,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(655,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(656,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(656,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(656,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(656,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(655,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at pack_kernel.f90(656,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(656,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_FRONT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PACK_KERNEL_MODULE::CLOVER_UNPACK_MESSAGE_FRONT) [13] pack_kernel.f90(666,12)


    Report from: OpenMP optimizations [openmp]

pack_kernel.f90(711:7-711:7):OMP:pack_kernel_module_mp_clover_unpack_message_front_:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at pack_kernel.f90(710,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at pack_kernel.f90(712,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pack_kernel.f90(713,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(713,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pack_kernel.f90(713,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pack_kernel.f90(713,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at pack_kernel.f90(712,5)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 25.500 
   remark #15478: estimated potential speedup: 0.940 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at pack_kernel.f90(713,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at pack_kernel.f90(713,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================
