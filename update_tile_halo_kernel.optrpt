Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: update_tile_halo_kernel_module._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (update_tile_halo_kernel_module._) [1] update_tile_halo_kernel.f90(25,8)

===========================================================================

Begin optimization report for: UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_LEFT_KERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_LEFT_KERNEL) [2] update_tile_halo_kernel.f90(31,16)


    Report from: OpenMP optimizations [openmp]

update_tile_halo_kernel.f90(100:7-100:7):OMP:update_tile_halo_kernel_module_mp_update_tile_halo_left_kernel_:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at update_tile_halo_kernel.f90(107,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(109,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(109,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(109,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(109,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(120,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(122,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(122,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(122,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(122,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(134,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(136,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(136,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(136,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(136,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(147,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(149,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(149,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(149,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(149,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(161,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(163,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(163,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(163,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(163,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(174,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(176,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(176,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(176,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(176,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(187,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(189,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(189,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(189,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(189,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(201,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(203,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(203,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(203,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(203,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(214,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(216,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(216,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(216,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(216,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(227,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(229,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(229,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(229,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(229,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(240,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(242,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(242,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(242,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(242,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(253,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(255,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(255,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(255,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(255,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(266,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(268,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(268,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(268,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(268,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(279,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(281,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(281,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(281,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(281,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(292,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(294,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(294,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(294,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(294,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(305,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(307,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(307,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(307,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(307,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(318,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(320,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(320,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(320,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(320,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(331,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(333,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(333,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(333,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(333,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(344,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(346,21)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(346,21)
      remark #25453: Loop Reversed
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(346,21)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at update_tile_halo_kernel.f90(346,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_RIGHT_KERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_RIGHT_KERNEL) [3] update_tile_halo_kernel.f90(361,16)


    Report from: OpenMP optimizations [openmp]

update_tile_halo_kernel.f90(430:7-430:7):OMP:update_tile_halo_kernel_module_mp_update_tile_halo_right_kernel_:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at update_tile_halo_kernel.f90(435,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(437,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(437,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(437,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(437,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(437,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(448,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(450,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(450,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(450,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(450,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(450,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(462,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(464,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(464,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(464,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(464,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(464,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(475,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(477,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(477,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(477,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(477,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(477,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(489,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(491,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(491,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(491,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(491,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(491,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(502,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(504,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(504,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(504,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(504,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(504,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(515,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(517,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(517,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(517,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(517,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(517,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(529,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(531,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(531,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(531,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(531,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(531,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(542,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(544,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(544,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(544,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(544,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(544,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(555,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(557,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(557,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(557,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(557,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(557,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(568,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(570,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(570,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(570,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(570,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(570,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(581,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(583,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(583,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(583,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(583,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(583,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(594,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(596,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(596,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(596,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(596,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(596,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(607,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(609,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(609,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(609,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(609,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(609,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(620,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(622,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(622,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(622,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(622,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(622,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(633,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(635,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(635,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(635,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(635,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(635,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(646,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(648,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(648,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(648,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(648,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(648,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(659,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(661,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(661,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(661,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(661,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(661,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(672,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(674,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(674,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(674,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(674,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(674,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

update_tile_halo_kernel.f90(675,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(675,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(675,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(662,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(662,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(662,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(649,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(649,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(649,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(636,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(636,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(636,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(623,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(623,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(623,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(610,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(610,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(610,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(597,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(597,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(597,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(584,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(584,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(584,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(571,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(571,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(571,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(558,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(558,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(558,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(545,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(545,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(545,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(532,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(532,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(532,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(518,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(518,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(518,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(505,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(505,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(505,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(492,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(492,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(492,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(478,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(478,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(478,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(465,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(465,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(465,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(451,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(451,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(451,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(438,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(438,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(438,25):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================

Begin optimization report for: UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_TOP_KERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_TOP_KERNEL) [4] update_tile_halo_kernel.f90(690,16)


    Report from: OpenMP optimizations [openmp]

update_tile_halo_kernel.f90(759:7-759:7):OMP:update_tile_halo_kernel_module_mp_update_tile_halo_top_kernel_:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at update_tile_halo_kernel.f90(764,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(766,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(766,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(766,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(766,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(766,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(777,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(779,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(779,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(779,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(779,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(779,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(791,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(793,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(793,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(793,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(793,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(793,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(804,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(806,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(806,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(806,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(806,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(806,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(818,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(820,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(820,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(820,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(820,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(820,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(831,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(833,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(833,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(833,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(833,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(833,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(844,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(846,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(846,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(846,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(846,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(846,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(858,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(860,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(860,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(860,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(860,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(860,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(871,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(873,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(873,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(873,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(873,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(873,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(884,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(886,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(886,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(886,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(886,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(886,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(897,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(899,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(899,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(899,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(899,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(899,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(910,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(912,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(912,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(912,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(912,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(912,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(923,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(925,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(925,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(925,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(925,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(925,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(936,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(938,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(938,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(938,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(938,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(938,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(949,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(951,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(951,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(951,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(951,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(951,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(962,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(964,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(964,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(964,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(964,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(964,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(975,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(977,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(977,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(977,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(977,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(977,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(988,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(990,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(990,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(990,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(990,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(990,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1001,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1003,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1003,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1003,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1003,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1003,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

update_tile_halo_kernel.f90(1004,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1004,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1004,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(991,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(991,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(991,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(978,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(978,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(978,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(965,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(965,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(965,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(952,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(952,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(952,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(939,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(939,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(939,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(926,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(926,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(926,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(913,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(913,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(913,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(900,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(900,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(900,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(887,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(887,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(887,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(874,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(874,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(874,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(861,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(861,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(861,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(847,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(847,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(847,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(834,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(834,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(834,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(821,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(821,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(821,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(807,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(807,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(807,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(794,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(794,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(794,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(780,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(780,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(780,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(767,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(767,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(767,25):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================

Begin optimization report for: UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_BOTTOM_KERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_BOTTOM_KERNEL) [5] update_tile_halo_kernel.f90(1022,16)


    Report from: OpenMP optimizations [openmp]

update_tile_halo_kernel.f90(1091:7-1091:7):OMP:update_tile_halo_kernel_module_mp_update_tile_halo_bottom_kernel_:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at update_tile_halo_kernel.f90(1096,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1098,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1098,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1098,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1098,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1098,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1109,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1111,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1111,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1111,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1111,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1111,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1123,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1125,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1125,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1125,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1125,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1125,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1136,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1138,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1138,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1138,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1138,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1138,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1150,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1152,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1152,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1152,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1152,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1152,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1163,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1165,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1165,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1165,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1165,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1165,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1176,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1178,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1178,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1178,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1178,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1178,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1190,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1192,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1192,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1192,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1192,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1192,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1203,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1205,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1205,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1205,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1205,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1205,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1216,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1218,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1218,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1218,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1218,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1218,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1229,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1231,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1231,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1231,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1231,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1231,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1242,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1244,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1244,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1244,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1244,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1244,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1255,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1257,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1257,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1257,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1257,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1257,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1268,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1270,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1270,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1270,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1270,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1270,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1281,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1283,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1283,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1283,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1283,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1283,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1294,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1296,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1296,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1296,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1296,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1296,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1307,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1309,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1309,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1309,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1309,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1309,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1320,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1322,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1322,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1322,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1322,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1322,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1333,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1335,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1335,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1335,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1335,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1335,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

update_tile_halo_kernel.f90(1336,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1336,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1336,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1323,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1323,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1323,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1310,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1310,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1310,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1297,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1297,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1297,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1284,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1284,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1284,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1271,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1271,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1271,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1258,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1258,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1258,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1245,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1245,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1245,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1232,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1232,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1232,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1219,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1219,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1219,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1206,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1206,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1206,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1193,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1193,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1193,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1179,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1179,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1179,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1166,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1166,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1166,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1153,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1153,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1153,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1139,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1139,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1139,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1126,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1126,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1126,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1112,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1112,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1112,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1099,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1099,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1099,25):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================

Begin optimization report for: UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_FRONT_KERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_FRONT_KERNEL) [6] update_tile_halo_kernel.f90(1351,16)


    Report from: OpenMP optimizations [openmp]

update_tile_halo_kernel.f90(1419:7-1419:7):OMP:update_tile_halo_kernel_module_mp_update_tile_halo_front_kernel_:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at update_tile_halo_kernel.f90(1424,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1426,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1426,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1426,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1426,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1426,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1437,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1439,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1439,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1439,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1439,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1439,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1450,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1452,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1452,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1452,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1452,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1452,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1463,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1465,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1465,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1465,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1465,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1465,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1476,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1478,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1478,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1478,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1478,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1478,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1489,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1491,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1491,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1491,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1491,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1491,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1502,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1504,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1504,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1504,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1504,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1504,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1515,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1517,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1517,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1517,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1517,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1517,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1528,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1530,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1530,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1530,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1530,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1530,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1541,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1543,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1543,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1543,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1543,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1543,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1554,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1556,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1556,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1556,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1556,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1556,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1567,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1569,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1569,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1569,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1569,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1569,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1580,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1582,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1582,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1582,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1582,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1582,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1593,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1595,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1595,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1595,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1595,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1595,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1606,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1608,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1608,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1608,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1608,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1608,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1619,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1621,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1621,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1621,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1621,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1621,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1632,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1634,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1634,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1634,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1634,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1634,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1645,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1647,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1647,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1647,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1647,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1647,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1658,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1660,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1660,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1660,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1660,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1660,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

update_tile_halo_kernel.f90(1661,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1661,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1661,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1648,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1648,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1648,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1635,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1635,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1635,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1622,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1622,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1622,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1609,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1609,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1609,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1596,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1596,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1596,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1583,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1583,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1583,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1570,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1570,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1570,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1557,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1557,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1557,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1544,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1544,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1544,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1531,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1531,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1531,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1518,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1518,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1518,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1505,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1505,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1505,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1492,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1492,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1492,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1479,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1479,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1479,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1466,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1466,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1466,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1453,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1453,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1453,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1440,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1440,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1440,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1427,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1427,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1427,25):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================

Begin optimization report for: UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_BACK_KERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (UPDATE_TILE_HALO_KERNEL_MODULE::UPDATE_TILE_HALO_BACK_KERNEL) [7] update_tile_halo_kernel.f90(1674,16)


    Report from: OpenMP optimizations [openmp]

update_tile_halo_kernel.f90(1742:7-1742:7):OMP:update_tile_halo_kernel_module_mp_update_tile_halo_back_kernel_:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at update_tile_halo_kernel.f90(1747,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1749,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1749,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1749,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1749,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1749,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1760,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1762,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1762,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1762,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1762,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1762,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1773,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1775,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1775,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1775,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1775,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1775,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1786,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1788,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1788,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1788,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1788,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1788,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1799,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1801,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1801,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1801,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1801,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1801,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1812,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1814,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1814,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1814,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1814,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1814,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1825,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1827,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1827,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1827,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1827,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1827,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1838,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1840,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1840,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1840,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1840,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1840,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1851,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1853,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1853,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1853,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1853,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1853,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1864,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1866,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1866,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1866,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1866,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1866,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1877,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1879,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1879,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1879,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1879,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1879,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1890,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1892,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1892,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1892,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1892,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1892,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1903,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1905,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1905,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1905,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1905,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1905,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1916,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1918,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1918,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1918,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1918,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1918,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1929,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1931,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1931,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1931,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1931,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1931,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1942,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1944,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1944,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1944,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1944,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1944,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1955,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1957,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1957,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1957,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1957,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1957,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1968,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1970,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1970,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1970,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1970,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1970,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at update_tile_halo_kernel.f90(1981,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at update_tile_halo_kernel.f90(1983,21)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at update_tile_halo_kernel.f90(1983,21)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1983,21)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1983,21)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at update_tile_halo_kernel.f90(1983,21)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

update_tile_halo_kernel.f90(1984,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1984,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1984,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1971,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1971,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1971,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1958,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1958,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1958,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1945,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1945,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1945,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1932,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1932,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1932,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1919,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1919,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1919,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1906,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1906,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1906,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1893,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1893,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1893,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1880,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1880,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1880,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1867,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1867,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1867,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1854,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1854,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1854,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1841,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1841,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1841,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1828,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1828,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1828,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1815,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1815,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1815,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1802,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1802,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1802,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1789,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1789,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1789,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1776,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1776,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1776,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1763,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1763,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1763,25):remark #34026: call to memcpy implemented as a call to optimized library version
update_tile_halo_kernel.f90(1750,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1750,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
update_tile_halo_kernel.f90(1750,25):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================
